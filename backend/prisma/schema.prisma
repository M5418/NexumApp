generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @db.VarChar(12)
  email           String       @unique(map: "email") @db.VarChar(255)
  password_hash   String       @db.VarChar(255)
  created_at      DateTime?    @default(now()) @db.Timestamp(0)
  connectionsFrom Connection[] @relation("from_connections")
  connectionsTo   Connection[] @relation("to_connections")
  profile         Profile?
  uploads         Upload[]

  @@map("users")
}

model Profile {
  id                       String    @id @db.VarChar(12)
  user_id                  String    @unique(map: "user_id") @db.VarChar(12)
  first_name               String?   @db.VarChar(100)
  last_name                String?   @db.VarChar(100)
  username                 String?   @unique(map: "username") @db.VarChar(100)
  birthday                 DateTime? @db.Date
  gender                   String?   @db.VarChar(50)
  status                   String?   @db.VarChar(50)
  interest_domains         Json?
  street                   String?   @db.VarChar(255)
  city                     String?   @db.VarChar(100)
  state                    String?   @db.VarChar(100)
  postal_code              String?   @db.VarChar(20)
  country                  String?   @db.VarChar(100)
  profile_photo_url        String?   @db.Text
  cover_photo_url          String?   @db.Text
  created_at               DateTime? @default(now()) @db.Timestamp(0)
  updated_at               DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  professional_experiences Json?
  trainings                Json?
  bio                      String?   @db.Text
  user                     User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profiles_user")

  @@map("profiles")
}

model Upload {
  id         String    @id @db.VarChar(12)
  user_id    String?   @db.VarChar(12)
  s3_key     String    @db.VarChar(512)
  url        String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uploads_ibfk_1")

  @@index([user_id], map: "user_id")
  @@map("uploads")
}

model Connection {
  from_user_id String    @db.VarChar(12)
  to_user_id   String    @db.VarChar(12)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  from_user    User      @relation("from_connections", fields: [from_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "connections_ibfk_1")
  to_user      User      @relation("to_connections", fields: [to_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "connections_ibfk_2")

  @@id([from_user_id, to_user_id])
  @@index([to_user_id], map: "to_user_id")
  @@map("connections")
}
