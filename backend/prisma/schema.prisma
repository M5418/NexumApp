generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @db.VarChar(12)
  email           String          @unique(map: "email") @db.VarChar(255)
  password_hash   String          @db.VarChar(255)
  created_at      DateTime?       @default(now()) @db.Timestamp(0)
  connectionsFrom Connection[]    @relation("from_connections")
  connectionsTo   Connection[]    @relation("to_connections")
  post_comments   post_comments[]
  posts           posts[]
  profile         Profile?
  uploads         Upload[]
  sent_invitations Invitation[]   @relation("sent_invitations")
  received_invitations Invitation[] @relation("received_invitations")
  conversations   Conversation[]

  @@map("users")
}

model Profile {
  id                       String    @id @db.VarChar(12)
  user_id                  String    @unique(map: "user_id") @db.VarChar(12)
  first_name               String?   @db.VarChar(100)
  last_name                String?   @db.VarChar(100)
  username                 String?   @unique(map: "username") @db.VarChar(100)
  birthday                 DateTime? @db.Date
  gender                   String?   @db.VarChar(50)
  status                   String?   @db.VarChar(50)
  interest_domains         Json?
  street                   String?   @db.VarChar(255)
  city                     String?   @db.VarChar(100)
  state                    String?   @db.VarChar(100)
  postal_code              String?   @db.VarChar(20)
  country                  String?   @db.VarChar(100)
  profile_photo_url        String?   @db.Text
  cover_photo_url          String?   @db.Text
  created_at               DateTime? @default(now()) @db.Timestamp(0)
  updated_at               DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  professional_experiences Json?
  trainings                Json?
  bio                      String?   @db.Text
  // Invitation counters
  invitations_sent         Int?      @default(0)
  invitations_received     Int?      @default(0)
  invitations_accepted     Int?      @default(0)
  invitations_refused      Int?      @default(0)
  pending_invitations      Int?      @default(0)
  user                     User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profiles_user")

  @@map("profiles")
}

model Upload {
  id         String    @id @db.VarChar(12)
  user_id    String?   @db.VarChar(12)
  s3_key     String    @db.VarChar(512)
  url        String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uploads_ibfk_1")

  @@index([user_id], map: "user_id")
  @@map("uploads")
}

model Connection {
  from_user_id String    @db.VarChar(12)
  to_user_id   String    @db.VarChar(12)
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  from_user    User      @relation("from_connections", fields: [from_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "connections_ibfk_1")
  to_user      User      @relation("to_connections", fields: [to_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "connections_ibfk_2")

  @@id([from_user_id, to_user_id])
  @@index([to_user_id], map: "to_user_id")
  @@map("connections")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model connections_backup {
  from_user_id BigInt
  to_user_id   BigInt
  created_at   DateTime? @default(now()) @db.Timestamp(0)

  @@ignore
}

model post_comments {
  id          String    @id @db.VarChar(12)
  post_id     String    @db.VarChar(12)
  user_id     String    @db.VarChar(12)
  content     String    @db.Text
  liked_by    Json?
  likes_count Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  posts       posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_comments_fk_post")
  users       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_comments_fk_user")

  @@index([post_id], map: "post_comments_post_id")
  @@index([user_id], map: "post_comments_user_id")
  @@index([created_at], map: "post_comments_created_at")
}

model posts {
  id              String          @id @db.VarChar(12)
  user_id         String          @db.VarChar(12)
  post_type       posts_post_type @default(text)
  content         String?         @db.Text
  image_url       String?         @db.Text
  image_urls      Json?
  video_url       String?         @db.Text
  liked_by        Json?
  shared_by       Json?
  bookmarked_by   Json?
  reposted_by     Json?
  likes_count     Int?            @default(0)
  shares_count    Int?            @default(0)
  bookmarks_count Int?            @default(0)
  reposts_count   Int?            @default(0)
  comments_count  Int?            @default(0)
  repost_of       String?         @db.VarChar(12)
  created_at      DateTime?       @default(now()) @db.Timestamp(0)
  updated_at      DateTime?       @default(now()) @updatedAt @db.Timestamp(0)
  post_comments   post_comments[]
  posts           posts?          @relation("postsToposts", fields: [repost_of], references: [id], onUpdate: NoAction, map: "posts_fk_repost")
  other_posts     posts[]         @relation("postsToposts")
  users           User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_fk_user")

  @@index([created_at], map: "posts_created_at")
  @@index([repost_of], map: "posts_repost_of")
  @@index([user_id], map: "posts_user_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model profiles_backup {
  id                       BigInt    @default(0)
  user_id                  BigInt
  first_name               String?   @db.VarChar(100)
  last_name                String?   @db.VarChar(100)
  username                 String?   @db.VarChar(100)
  birthday                 DateTime? @db.Date
  gender                   String?   @db.VarChar(50)
  status                   String?   @db.VarChar(50)
  interest_domains         Json?
  street                   String?   @db.VarChar(255)
  city                     String?   @db.VarChar(100)
  state                    String?   @db.VarChar(100)
  postal_code              String?   @db.VarChar(20)
  country                  String?   @db.VarChar(100)
  profile_photo_url        String?   @db.Text
  cover_photo_url          String?   @db.Text
  created_at               DateTime? @default(now()) @db.Timestamp(0)
  updated_at               DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  professional_experiences Json?
  trainings                Json?
  bio                      String?   @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model uploads_backup {
  id         BigInt    @default(0)
  user_id    BigInt?
  s3_key     String    @db.VarChar(512)
  url        String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@ignore
}

model Invitation {
  id                 String            @id @db.VarChar(12)
  sender_id          String            @db.VarChar(12)
  receiver_id        String            @db.VarChar(12)
  invitation_content String            @db.Text
  status             invitation_status @default(pending)
  created_at         DateTime?         @default(now()) @db.Timestamp(0)
  updated_at         DateTime?         @default(now()) @updatedAt @db.Timestamp(0)
  sender             User              @relation("sent_invitations", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "invitations_fk_sender")
  receiver           User              @relation("received_invitations", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "invitations_fk_receiver")

  @@index([sender_id], map: "invitations_sender_id")
  @@index([receiver_id], map: "invitations_receiver_id")
  @@index([status], map: "invitations_status")
  @@index([created_at], map: "invitations_created_at")
  @@map("invitations")
}

enum posts_post_type {
  text
  text_photo
  text_video
}

enum invitation_status {
  pending
  accepted
  refused
}

enum chat_message_type {
  text
  image
  video
  voice
  file
}

enum media_type {
  image
  video
  voice
  document
}

model Conversation {
  id                 String            @id @db.VarChar(12)
  user_a_id          String            @db.VarChar(12)
  user_b_id          String            @db.VarChar(12)
  last_message_type  chat_message_type?
  last_message_text  String?           @db.Text
  last_message_at    DateTime?         @db.Timestamp(0)
  // per-user state
  user_a_last_read_at DateTime?        @db.Timestamp(0)
  user_b_last_read_at DateTime?        @db.Timestamp(0)
  user_a_muted       Boolean           @default(false)
  user_b_muted       Boolean           @default(false)
  user_a_deleted     Boolean           @default(false)
  user_b_deleted     Boolean           @default(false)
  created_at         DateTime?         @default(now()) @db.Timestamp(0)
  updated_at         DateTime?         @default(now()) @updatedAt @db.Timestamp(0)

  // Relations
  userA              User              @relation(fields: [user_a_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "conversations_fk_user_a")
  userB              User              @relation(fields: [user_b_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "conversations_fk_user_b")
  messages           ChatMessage[]

  @@index([user_a_id], map: "conversations_user_a")
  @@index([user_b_id], map: "conversations_user_b")
  @@index([last_message_at], map: "conversations_last_message_at")
  @@unique([user_a_id, user_b_id], map: "conversations_unique_pair")
  @@map("conversations")
}

model ChatMessage {
  id              String            @id @db.VarChar(12)
  conversation_id String            @db.VarChar(12)
  sender_id       String            @db.VarChar(12)
  receiver_id     String            @db.VarChar(12)
  type            chat_message_type
  text            String?           @db.Text
  read_at         DateTime?         @db.Timestamp(0)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @updatedAt @db.Timestamp(0)

  // Relations
  conversation    Conversation      @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_messages_fk_conversation")
  sender          User              @relation("chat_sender", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_messages_fk_sender")
  receiver        User              @relation("chat_receiver", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_messages_fk_receiver")
  attachments     ChatAttachment[]
  reactions       ChatReaction[]

  @@index([conversation_id], map: "chat_messages_conversation")
  @@index([sender_id], map: "chat_messages_sender")
  @@index([receiver_id], map: "chat_messages_receiver")
  @@index([created_at], map: "chat_messages_created_at")
  @@map("chat_messages")
}

model ChatAttachment {
  id          String      @id @db.VarChar(12)
  message_id  String      @db.VarChar(12)
  type        media_type
  url         String      @db.Text
  thumbnail   String?     @db.Text
  durationSec Int?
  fileSize    Int?
  fileName    String?     @db.VarChar(255)
  created_at  DateTime?   @default(now()) @db.Timestamp(0)

  // Relations
  message     ChatMessage @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_attachments_fk_message")

  @@index([message_id], map: "chat_attachments_message")
  @@map("chat_attachments")
}

model ChatReaction {
  id         String      @id @db.VarChar(12)
  message_id String      @db.VarChar(12)
  user_id    String      @db.VarChar(12)
  emoji      String      @db.VarChar(16)
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @default(now()) @updatedAt @db.Timestamp(0)

  // Relations
  message    ChatMessage @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_reactions_fk_message")
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chat_reactions_fk_user")

  @@unique([message_id, user_id], map: "chat_reactions_unique")
  @@index([user_id], map: "chat_reactions_user")
  @@map("chat_reactions")
}
